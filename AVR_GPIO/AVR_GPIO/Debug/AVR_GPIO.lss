
AVR_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800100  00800100  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc1  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b99  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000535  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b4  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 35       	cpi	r26, 0x52	; 82
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  d4:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <__vector_1>:
}

static volatile int pulse = 0;
static volatile int i = 0;

ISR(INT0_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	LED_TOGGLE;
  ee:	1d 9a       	sbi	0x03, 5	; 3
	if (i == 1){
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	81 f4       	brne	.+32     	; 0x11c <__vector_1+0x40>
		//LED_TOGGLE;
		TCCR1B = 0;
  fc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse = TCNT1;
 100:	e4 e8       	ldi	r30, 0x84	; 132
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulse+0x1>
 10c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulse>
		TCNT1 = 0;
 110:	11 82       	std	Z+1, r1	; 0x01
 112:	10 82       	st	Z, r1
		i = 0;
 114:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	if (i == 0){
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 124:	89 2b       	or	r24, r25
 126:	59 f4       	brne	.+22     	; 0x13e <__vector_1+0x62>
		//LED_TOGGLE;
		TCCR1B |= (1<<CS10);
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
		i = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <main>:

int main(void){
	Sensor_Init();
 150:	0e 94 bf 00 	call	0x17e	; 0x17e <Sensor_Init>
    while (1){
		//LED_TOGGLE;
		int c = 0;

		// Trig Signal
		PORTB |= (1<<PINB3); 
 154:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	25 e0       	ldi	r18, 0x05	; 5
 158:	2a 95       	dec	r18
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x8>
		_delay_us(15); 
		PORTB &= ~(1<<PINB3);
 15c:	2b 98       	cbi	0x05, 3	; 5

		//for (idx = 0; idx < NUM_SENSOR; idx++){
			//c = (pulse / 58);
			if (pulse != 0){
 15e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pulse>
 162:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <pulse+0x1>
 166:	89 2b       	or	r24, r25
 168:	a9 f3       	breq	.-22     	; 0x154 <main+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	8f e9       	ldi	r24, 0x9F	; 159
 16c:	96 e8       	ldi	r25, 0x86	; 134
 16e:	21 e0       	ldi	r18, 0x01	; 1
 170:	81 50       	subi	r24, 0x01	; 1
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x20>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x2a>
 17a:	00 00       	nop
 17c:	eb cf       	rjmp	.-42     	; 0x154 <main+0x4>

0000017e <Sensor_Init>:

void Sensor_Init(){
	//input(0), output(1), others: Don't care
	int idx;
	// Trig Pin Setup: PB3
	DDRB |= (1<<DDB3);
 17e:	23 9a       	sbi	0x04, 3	; 4
	
	// Echo Pin Setup: PD2(EXTINT0), PD3(EXTINT1), PB5(PCINT0), PE0(PCINT3) 
	//DDRD &= ~(1<<DDD3); 
	DDRD &= ~(1<<DDD2);
 180:	52 98       	cbi	0x0a, 2	; 10
	//DDRB &= ~(1<<DDB4);
	//DDRE &= ~(1<<DDE0);

	// Turn on the pull-up
	PORTD |= (1<<PORTD2)/* | (1<<PORTD3)*/;
 182:	5a 9a       	sbi	0x0b, 2	; 11
 184:	83 ed       	ldi	r24, 0xD3	; 211
 186:	90 e3       	ldi	r25, 0x30	; 48
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <Sensor_Init+0xa>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <Sensor_Init+0x10>
 18e:	00 00       	nop
	//PORTE |= (1<<PORTE0);

	_delay_ms(50);

	// Enable the Interrupt
	sei();
 190:	78 94       	sei
	EICRA |= (1<<ISC00)/* | (1<<ISC10)*/; // Set INT0 & INT1 to trigger on ANY logic change
 192:	e9 e6       	ldi	r30, 0x69	; 105
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0)/* | (1<<INT1)*/;  // Turns on INT0 & INT1
 19c:	e8 9a       	sbi	0x1d, 0	; 29
	//PCICR |= (1<<PCIE3) | (1<<PCIE0); 
	//PCMSK0 |= (1<<PCINT4);
	//PCMSK3 |= (1<<PCINT24);		

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].pulse = 0;
 19e:	e4 e0       	ldi	r30, 0x04	; 4
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	11 82       	std	Z+1, r1	; 0x01
 1a4:	10 82       	st	Z, r1
		sensors[idx].flag = 0;
 1a6:	13 82       	std	Z+3, r1	; 0x03
 1a8:	12 82       	std	Z+2, r1	; 0x02
	//PCICR |= (1<<PCIE3) | (1<<PCIE0); 
	//PCMSK0 |= (1<<PCINT4);
	//PCMSK3 |= (1<<PCINT24);		

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].pulse = 0;
 1aa:	13 8e       	std	Z+27, r1	; 0x1b
 1ac:	12 8e       	std	Z+26, r1	; 0x1a
		sensors[idx].flag = 0;
 1ae:	15 8e       	std	Z+29, r1	; 0x1d
 1b0:	14 8e       	std	Z+28, r1	; 0x1c
	//PCICR |= (1<<PCIE3) | (1<<PCIE0); 
	//PCMSK0 |= (1<<PCINT4);
	//PCMSK3 |= (1<<PCINT24);		

	for (idx = 0; idx < NUM_SENSOR; idx++){
		sensors[idx].pulse = 0;
 1b2:	15 aa       	std	Z+53, r1	; 0x35
 1b4:	14 aa       	std	Z+52, r1	; 0x34
		sensors[idx].flag = 0;
 1b6:	17 aa       	std	Z+55, r1	; 0x37
 1b8:	16 aa       	std	Z+54, r1	; 0x36
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
